---
- name: Create solr group
  group:
    name: '{{ solr_group }}'
    state: present
  tags:
    - solr_user

- name: Create solr user
  user:
    name: '{{ solr_user }}'
    group: '{{ solr_group }}'
    state: present
    createhome: yes
  tags:
    - solr_group

- name: Check if Solr has already been downloaded and unpacked
  stat:
    path: '{{ solr_root_dir }}/solr-{{ solr_version }}'
  register: dir

- name: Download Apache Solr
  get_url:
    url: "{{solr_mirror}}/{{ solr_version }}/solr-{{ solr_version }}.tgz"
    dest: /tmp
  when: dir.stat.exists == False
  tags:
    - solr_download

- name: Unpack Apache Solr
  unarchive:
    src: /tmp/solr-{{ solr_version }}.tgz
    dest: /tmp
    copy: no
    group: '{{ solr_group }}'
    owner: '{{ solr_user }}'
  when: dir.stat.exists == False
  tags:
    - solr_unpack

- name: Create Solr directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
  with_items:
    - "{{ solr_log_dir }}"
    - "{{ solr_data_dir }}"
  when: dir.stat.exists == False
  tags:
    - solr_dirs

- name: Install Solr from script
  command: /tmp/solr-{{ solr_version }}/bin/install_solr_service.sh /tmp/solr-{{ solr_version }}.tgz -i {{ solr_root_dir }} -d {{ solr_home }} -u solr -s solr -p {{ solr_port }} -n
  tags:
    - solr_install 

- name: Copy solr service
  template:
    src: "service.j2"
    dest: "/lib/systemd/system/solr.service"
    owner: solr
    mode: 0755
  notify: Reload systemd

- name: Enable solr service
  systemd:
    name: "solr"
    enabled: yes
    masked: no
    daemon_reload: yes
    state: restarted

- name: Give execution permission to zkcli script
  file:
    path: "{{ solr_zookeeper_client_path }}/zkcli.sh"
    mode: 0744
  
- name: Check Root Path (znode) in ZooKeeper
  command: >
    {{ solr_zookeeper_client_path }}/zkcli.sh
    -zkhost {{ solr_zookeeper_hosts }}
    -cmd list /solr
  register: solr_path_check
  changed_when: false
  run_once: true

- name: Create Root Path (znode) in ZooKeeper using zkcli script
  command: >
    {{ solr_zookeeper_client_path }}/zkcli.sh
    -zkhost {{ solr_zookeeper_hosts }}
    -cmd makepath /solr
  when: '"/solr" not in solr_path_check.stdout'
  run_once: true
  register: create_root_path_result
  failed_when: |
    create_root_path_result.rc != 0 and
    "NodeExists" not in create_root_path_result.stderr

- name: Configuring jetty server
  template:
    src: jetty.xml.j2
    dest: "{{ solr_install_dir }}/server/etc/jetty.xml"
    force: true
  notify: Restart Solr service

- name: Configuring jetty server http
  template:
    src: jetty-http.xml.j2
    dest: "{{ solr_install_dir }}/server/etc/jetty-http.xml"
    force: true
  notify: Restart Solr service

- name: Configuring SolrCloud init script
  template:
    src: solr.in.sh.j2
    dest: /etc/default/solr.in.sh
    force: true
  notify: Restart Solr service

- name: Configuring SolrCloud properties
  template:
    src: solr.xml.j2
    dest: "{{ solr_data_dir }}/solr.xml"
    force: true
  notify: Restart Solr service

- name: Configuring logging
  template:
    src: "{{ solr_log_config_file }}.j2"
    dest: "{{ solr_install_dir }}/{{ solr_log_config_file }}"
    force: true
  notify: Restart Solr service

# Authentication
- name: Setup Authentication
  block:
    - name: Generate basic auth config
      template:
        src: security.json.j2
        dest: '{{ solr_home }}/security.json'
        owner: '{{ solr_user }}'
        group: '{{ solr_group }}'
        mode: 0640

    - name: Upload security.json to ZooKeeper
      command: >
        {{ solr_dir }}/bin/solr zk cp file:{{ solr_home }}/security.json zk:/security.json -z {{ solr_zk_host }}
  run_once: true

# SSL Setup
- name: Generate Self Signed OpenSSL certificate
  block:
    - name: Generate an OpenSSL private key
      openssl_privatekey:
        path: '{{ solr_pkey_path }}'
        size: '{{ solr_ssl_key_size | int }}'

    - name: Generate an OpenSSL CSR
      openssl_csr:
        path: '{{ solr_csr_path }}'
        privatekey_path: '{{ solr_pkey_path }}'
        common_name: '{{ inventory_hostname }}'

    - name: Generate a Self Signed OpenSSL certificate
      openssl_certificate:
        path: '{{ solr_cert_path }}'
        privatekey_path: '{{ solr_pkey_path }}'
        csr_path: '{{ solr_csr_path }}'
        provider: selfsigned
    
    - name: 
      slurp:
        src: "{{ solr_cert_path }}"
      register: solr_cert 
    
    - name: 
      slurp: 
        src: "{{ solr_pkey_path }}"
      register: solr_pkey
    
    - name: Create keystore
      java_keystore:
        name: '{{ inventory_hostname }}'
        certificate: '{{ solr_cert["content"] | b64decode }}'
        private_key: '{{ solr_pkey["content"] | b64decode }}'
        password: '{{ solr_ssl_key_store_password }}'
        dest: '{{ solr_ssl_key_store }}'
        owner: '{{ solr_user }}'
        group: '{{ solr_group }}'
        mode: 0644
    
    - name: Configure ZooKeeper
      command: >
        {{ solr_zookeeper_client_path }}/zkcli.sh -zkhost {{ solr_zk_host }} -cmd clusterprop -name urlScheme -val https 
      run_once: true

- name: Start the Solr service
  systemd:
    name: solr
    state: restarted
    enabled: yes
    daemon_reload: true
  tags:
    - solr_service

- name: Wait for Solr is UP
  uri:
    url: '{{ solr_url }}'
    status_code: '200'
    validate_certs: False
    user: '{{ solr_default_auth_user }}'
    password: '{{ solr_default_auth_pass }}'
    force_basic_auth: True
  register: solr_main_page
  run_once: true
  until: solr_main_page.status == 200
  retries: 20
  delay: 10

- name: Create admin user via API
  uri:
    url: '{{solr_url}}/admin/authentication'
    method: POST
    user: '{{ solr_default_auth_user }}'
    password: '{{ solr_default_auth_pass }}'
    validate_certs: False
    force_basic_auth: True
    headers:
      Content-Type: 'application/json'
    body_format: json
    body: '{"set-user": {"{{ solr_auth_user }}": "{{ solr_auth_pass }}"} }'
  notify: Restart Solr service
  run_once: true

- name: Change default admin user password via API
  uri:
    url: '{{solr_url}}/admin/authentication'
    method: POST
    user: '{{ solr_default_auth_user }}'
    password: '{{ solr_default_auth_pass }}'
    validate_certs: False
    force_basic_auth: True
    headers:
      Content-Type: 'application/json'
    body_format: json
    body: '{"set-user": {"solr": "{{ solr_auth_pass }}"} }'
  notify: Restart Solr service
  run_once: true

# Cleanup install by deleting downloaded ZooKeeper archive
- name: Delete Solr tar.gz file
  file:
    path: /tmp/solr-{{ solr_version }}.tar.gz
    state: absent
  tags:
    - solr_cleanup

# Set Ansible fact that Solr has completed installation. This is so that this role can be used in
# other dependent roles. Those roles can check for this fact to determine whether or not this role
# should be run. Failing to do so will mean that this role is executed even if it has already been run.
- name: Set fact solr_installed
  set_fact:
    solr_installed: true
  tags:
    - solr_install_fact
